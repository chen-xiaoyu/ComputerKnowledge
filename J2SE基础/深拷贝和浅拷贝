1. clone
Java 中，基本数据类型的处理都是值传递，其他类型都是按引用传递。对象除了函数调用时是引用传递，在使用“=”号时也是引用传递。
浅拷贝：被复制对象的所有值属性都含有与原来对象的相同，而所有的对象引用属性仍然指向原来的对象。
深拷贝：在浅拷贝的基础上，所有引用其他对象的变量也进行了 clone，并指向被复制过的新对象。
也就是说，一个默认的 clone()方法实现机制，仍然是赋值。
如果一个被复制的属性都是基本类型，那么只需要实现当前类的 cloneable 机制就可以了，此为浅拷贝。
如果被复制对象的属性包含其他实体类对象引用，那么这些实体类对象都需要实现 cloneable 接口并覆盖 clone()方法。

1. 实现深拷贝：
  进行拷贝操作时，须加以区分引用类型和基本数据类型的值，且拷贝引用类型的值时，不是简简单单的复制其保存在栈中的指针，（即浅拷贝）而是应该复制其存储在堆中的数据。
解题思路
（1）方法一：分别对数组、对象、基本数据类型值进行判断、考虑，使用递归的方式复制值
（2）方法二：利用了 JSON.parse()、JSON.stringify() 这两个方法实现深拷贝

其实深拷贝可以拆分成 2 步,浅拷贝 + 递归,浅拷贝时判断属性值是否是对象,如果是对象就进行递归操作,两个一结合就实现了深拷贝。
