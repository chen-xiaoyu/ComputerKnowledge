红黑树是自平衡的二叉搜索树，是计算机科学中的一种数据结构。平衡是指所有叶子的深度基本相同(完全相等的情况并不多见,所以只能趋向于相等) 。是一种二叉查找树，但在每个节点增加一个存储位表示节点的颜色，可以是红或黑（非红即黑）。通过对任何一条从根到叶子的路径上各个节点着色的方式的限制，红黑树确保没有一条路径会比其它路径长出两倍，因此，红黑树是一种弱平衡二叉树，相对于要求严格的AVL树来说，它的旋转次数少，所以对于搜索，插入，删除操作较多的情况下，通常使用红黑树。
性质：
1. 每个节点非红即黑
2. 根节点是黑的;
3. 每个叶节点（叶节点即树尾端NULL指针或NULL节点）都是黑的;
4. 如果一个节点是红色的，则它的子节点必须是黑色的。
5. 对于任意节点而言，其到叶子点树NULL指针的每条路径都包含相同数目的黑节点;
6. 树中节点有改动时,通过调整节点顺序（旋转）,重新给节点染色,使节点满足某种特殊的性质来保持平衡。
7. 旋转和染色过程肯定经过特殊设计可以高效的完成。
8. 它不是完全平衡的二叉树，但能保证搜索操作在 O(log n)的时间复杂度内完成（n 是树中节点总数）。
9. 插入、删除以及旋转、染色操作都是 O(log n)的时间复杂度。
10. 每个节点只需要用一位(bit)保存颜色（仅为红、黑两种）属性。

平衡二叉树又称为AVL树，是一种特殊的二叉排序树。其左右子树都是平衡二叉树，且左右子树高度之差的绝对值不超过1。一句话表述为：以树中所有结点为根的树的左右子树高度之差的绝对值不超过1。将二叉树上结点的左子树深度减去右子树深度的值称为平衡因子BF，那么平衡二叉树上的所有结点的平衡因子只可能是-1、0和1。只要二叉树上有一个结点的平衡因子的绝对值大于1，则该二叉树就是不平衡的

两者区别：
AVL 树是高度平衡的，频繁的插入和删除，会引起频繁的rebalance，导致效率下降；红黑树不是高度平衡的，算是一种折中，插入最多两次旋转，删除最多三次旋转。
