
# HashMap:
HashMap 数据是无序的，根据键的 hashCode 进行数据的存取，对数据的访问速度非常快，在 map 中插入删除和定位元素，hashMap 无疑是最好的选择。HashMap 是基于哈希表的 Map 接口的实现。此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。（除了非同步和允许使用 null 之外，HashMap 类与 Hashtable 大致相同。）此类不保证映射的顺序，特别是它不保证该顺序恒久不变。
# TreeMap:
里面的数据是有序的，底层是一个红黑树，如果想按照自定义顺序或者自然顺序存储数据，TreeMap 是一个最好的选择。
基于红黑树（Red-Black tree）的 NavigableMap 实现。该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。
LinkedHashMap:
他是 hashMap 的一个子类，底层维护了一个双向链表，他可以实现输入的顺序和输出的顺序相同

# HashMap、TreeMap区别：
HashMap通过hashcode对其内容进行快速查找，而 TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。
（1）HashMap:适用于在Map中插入、删除和定位元素。
（2）Treemap:适用于按自然顺序或自定义顺序遍历键（key）。
（3）HashMap通常比TreeMap快一点（树和哈希表的数据结构使然），建议多使用HashMap,在需要排序的Map时候才用TreeMap.
（4）HashMap 非线程安全 TreeMap 非线程安全
（5）HashMap的结果是没有排序的，而TreeMap输出的结果是排好序的。
