底部采用 hash 表数据加链表的形式，1.8 以后引入了红黑树的数据结构。时间复杂度由 O(n)变为 O(logn)
在 CurrentHashMap 中是加锁了的，实际上是读写锁，如果写冲突就会等待，
如果插入时间过长必然等待时间更长，而红黑树相对 AVL 树他的插入更快！
（1）AVL 以及红黑树是高度平衡的树数据结构。它们非常相似，真正的区别在于在任何添加/删除操作时完成的旋转操作次数。
（2）两种实现都缩放为 a O(lg N)，其中 N 是叶子的数量，但实际上 AVL 树在查找密集型任务上更快：利用更好的平衡，树遍历平均更短。另一方面，插入和删除方面，AVL 树速度较慢：需要更高的旋转次数才能在修改时正确地重新平衡数据结构。
（3）在 AVL 树中，从根到任何叶子的最短路径和最长路径之间的差异最多为 1。在红黑树中，差异可以是 2 倍。
（4）两个都给 O（log n）查找，但平衡 AVL 树可能需要 O（log n）旋转，而红黑树将需要最多两次旋转使其达到平衡（尽管可能需要检查 O（log n）节点以确定旋转的位置）。
