# 1. Session
Session和Cookie保持访问用户与后端服务器的交互状态。
Session不容易在多台服务器之间共享；
Cookie个数的增多和访问量的增加，占用带宽大。
# 2. Cookie
Cookie两个版本，0,1(Max-Age以秒来计算)
是HTTP协议头中的一个字段，不同存储器有不一样的限制。
Cookie可以让服务端程序跟踪每个客户端的访问，但每次客户端的访问都必须传回这些Cookie。
把所有要保存的数据通过HTTP协议的头部从客户端
# 3. Session
同一个客户端每次和服务端交互时，而是只要传回一个ID，这个ID是客户端第一次访问服务器时生成的。，而且每个客户端是唯一的。
Manager类将管理所有Session的生命周期；StandardManager类负责Servlet容器中所有StandardSession对象的生命周期。
# 4. Session框架
统一通过订阅服务器推送配置可以有效地集中管理资源。一个全局使用的Cookie，只需通过订阅服务器统一推送就行。
分布式缓存系统，可以随时写入和读取，如MemCache或淘宝的开源分布式缓存系统Tair。
# 5. 两个域名下的Session同步
必须将同一个sessionID作为Cookie写到两个域名下。
# 6.Cookie被盗取的问题处理
设置一个Session签名，当用户登录成功后根据用户私密信息生成的一个签名，以表示当前唯一的合法登录状态，然后将这个签名作为一个Cookie在当天用户浏览器进程中和服务器传递，用户每次访问服务器都会检查这个签名和服务器端分布式缓存中的取得的Session重新生成的签名是否一直，如果不一致就将清除这个sessionID在分布式缓存中的Session信息，让用户重新登录。
# 7.Cookie压缩
gzip和deflate算法，Cookie中不能包含控制字符，仅能包含ASCII码为34-126的可见字符。
可采用一个种子作为key生成一个随机数，并保存在Session中，等下次用户提交表单时做验证。当用户提交表单时生成的token带回来，这样就可以和Session中保存的token做对比，从而确认这次表单验证是否合法。
